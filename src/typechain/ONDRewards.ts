/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddedLiquidity = ContractEventLog<{
  ondAmount: string;
  oneAmount: string;
  0: string;
  1: string;
}>;
export type OnenodeClaimed = ContractEventLog<{
  account: string;
  amount: string;
  claimTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type OnenodeEntityCreated = ContractEventLog<{
  account: string;
  nodeType: string;
  nodeName: string;
  creationTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OnenodeTypeDeleted = ContractEventLog<{
  nodeType: string;
  0: string;
}>;
export type OnenodeTypeUpdated = ContractEventLog<{
  nodeType: string;
  nodePrice: string;
  nodeInterval: string;
  nodeRewardPerPeriod: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SwappedNodeCreationFeeBalance = ContractEventLog<{
  amount: string;
  0: string;
}>;

export interface ONDRewards extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ONDRewards;
  clone(): ONDRewards;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MAXIMUM_NODES_PER_ACCOUNT(): NonPayableTransactionObject<string>;

    MAXIMUM_NODE_NAME_LENGTH(): NonPayableTransactionObject<string>;

    MINIMUM_NODE_NAME_LENGTH(): NonPayableTransactionObject<string>;

    airdropNodes(
      _accounts: string[],
      _nodeType: number | string | BN,
      _nodeName: string
    ): NonPayableTransactionObject<void>;

    cashoutAll(): NonPayableTransactionObject<void>;

    cashoutFee(): NonPayableTransactionObject<string>;

    cashoutNode(
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    createNewOnenodeType(
      _nodePrice: number | string | BN,
      _nodeInterval: number | string | BN,
      _nodeRewardPerPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    createNode(
      _account: string,
      _nodeType: number | string | BN,
      _nodeName: string
    ): NonPayableTransactionObject<void>;

    createNodeFee(): NonPayableTransactionObject<string>;

    createNodeWithTokens(
      _nodeType: number | string | BN,
      _nodeName: string
    ): NonPayableTransactionObject<void>;

    exemptAddressFromFees(_address: string): NonPayableTransactionObject<void>;

    feeSafe(): NonPayableTransactionObject<string>;

    getAccountCreationTimes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountLastClaimTimes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountNodeNames(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountRewardAvailable(
      _account: string
    ): NonPayableTransactionObject<string>;

    getAccountRewardAvailableAsArray(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountTypes(_account: string): NonPayableTransactionObject<string[]>;

    getNode(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string]>;

    getNodeCount(_account: string): NonPayableTransactionObject<string>;

    getNodeCreationTime(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeInterval(
      _nodeType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeIntervals(): NonPayableTransactionObject<string[]>;

    getNodeLastClaimTime(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeName(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeRewardAvailable(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeRewardPerPeriod(
      _nodeType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getNodeRewardsPerPeriod(): NonPayableTransactionObject<string[]>;

    getNodeType(
      _account: string,
      _nodeIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    includeAddressInFees(_address: string): NonPayableTransactionObject<void>;

    isCashoutPaused(): NonPayableTransactionObject<boolean>;

    isNodeCreationPaused(): NonPayableTransactionObject<boolean>;

    liquidityFee(): NonPayableTransactionObject<string>;

    liquidityFeeBalance(): NonPayableTransactionObject<string>;

    manualLiquify(): NonPayableTransactionObject<void>;

    manualNodeCreationSwap(): NonPayableTransactionObject<void>;

    minimumLiquidityFeeBalanceToSwap(): NonPayableTransactionObject<string>;

    minimumNodeCreationFeeBalanceToSwap(): NonPayableTransactionObject<string>;

    nodeCreationFeeBalance(): NonPayableTransactionObject<string>;

    ond(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pauseCashout(): NonPayableTransactionObject<void>;

    pauseNodeCreation(): NonPayableTransactionObject<void>;

    removeOnenodeType(): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    resumeCashout(): NonPayableTransactionObject<void>;

    resumeNodeCreation(): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    setCashoutFee(
      _cashoutFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCreateNodeFee(
      _createNodeFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeSafe(_feeSafe: string): NonPayableTransactionObject<void>;

    setLiquidityFee(
      _liquidityFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumLiquidityFeeBalanceToSwap(
      _minimumLiquidityFeeBalanceToSwap: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumNodeCreationFeeBalanceToSwap(
      _minimumNodeCreationFeeBalanceToSwap: number | string | BN
    ): NonPayableTransactionObject<void>;

    setOnd(_ond: string): NonPayableTransactionObject<void>;

    setSushiOndOnePair(
      _sushiOndOnePair: string
    ): NonPayableTransactionObject<void>;

    setSushiRouter(_sushiRouter: string): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    sushiOndOnePair(): NonPayableTransactionObject<string>;

    sushiRouter(): NonPayableTransactionObject<string>;

    totalNodesCreated(): NonPayableTransactionObject<string>;

    totalOnenodeTypes(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateOnenodeType(
      _nodeType: number | string | BN,
      _nodePrice: number | string | BN,
      _nodeInterval: number | string | BN,
      _nodeRewardPerPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawERC20(
      _erc20: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddedLiquidity(cb?: Callback<AddedLiquidity>): EventEmitter;
    AddedLiquidity(
      options?: EventOptions,
      cb?: Callback<AddedLiquidity>
    ): EventEmitter;

    OnenodeClaimed(cb?: Callback<OnenodeClaimed>): EventEmitter;
    OnenodeClaimed(
      options?: EventOptions,
      cb?: Callback<OnenodeClaimed>
    ): EventEmitter;

    OnenodeEntityCreated(cb?: Callback<OnenodeEntityCreated>): EventEmitter;
    OnenodeEntityCreated(
      options?: EventOptions,
      cb?: Callback<OnenodeEntityCreated>
    ): EventEmitter;

    OnenodeTypeDeleted(cb?: Callback<OnenodeTypeDeleted>): EventEmitter;
    OnenodeTypeDeleted(
      options?: EventOptions,
      cb?: Callback<OnenodeTypeDeleted>
    ): EventEmitter;

    OnenodeTypeUpdated(cb?: Callback<OnenodeTypeUpdated>): EventEmitter;
    OnenodeTypeUpdated(
      options?: EventOptions,
      cb?: Callback<OnenodeTypeUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SwappedNodeCreationFeeBalance(
      cb?: Callback<SwappedNodeCreationFeeBalance>
    ): EventEmitter;
    SwappedNodeCreationFeeBalance(
      options?: EventOptions,
      cb?: Callback<SwappedNodeCreationFeeBalance>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddedLiquidity", cb: Callback<AddedLiquidity>): void;
  once(
    event: "AddedLiquidity",
    options: EventOptions,
    cb: Callback<AddedLiquidity>
  ): void;

  once(event: "OnenodeClaimed", cb: Callback<OnenodeClaimed>): void;
  once(
    event: "OnenodeClaimed",
    options: EventOptions,
    cb: Callback<OnenodeClaimed>
  ): void;

  once(event: "OnenodeEntityCreated", cb: Callback<OnenodeEntityCreated>): void;
  once(
    event: "OnenodeEntityCreated",
    options: EventOptions,
    cb: Callback<OnenodeEntityCreated>
  ): void;

  once(event: "OnenodeTypeDeleted", cb: Callback<OnenodeTypeDeleted>): void;
  once(
    event: "OnenodeTypeDeleted",
    options: EventOptions,
    cb: Callback<OnenodeTypeDeleted>
  ): void;

  once(event: "OnenodeTypeUpdated", cb: Callback<OnenodeTypeUpdated>): void;
  once(
    event: "OnenodeTypeUpdated",
    options: EventOptions,
    cb: Callback<OnenodeTypeUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(
    event: "SwappedNodeCreationFeeBalance",
    cb: Callback<SwappedNodeCreationFeeBalance>
  ): void;
  once(
    event: "SwappedNodeCreationFeeBalance",
    options: EventOptions,
    cb: Callback<SwappedNodeCreationFeeBalance>
  ): void;
}
