/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DepositEntityCreated = ContractEventLog<{
  account: string;
  depositType: string;
  depositSize: string;
  creationTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DepositTypeDeleted = ContractEventLog<{
  depositType: string;
  0: string;
}>;
export type DepositTypeUpdated = ContractEventLog<{
  depositType: string;
  lockPeriod: string;
  multiplier: string;
  interestInterval: string;
  depositInterestPerPeriod: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type SentFeeBalance = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type SupportedTokenClaimed = ContractEventLog<{
  account: string;
  amount: string;
  claimTime: string;
  0: string;
  1: string;
  2: string;
}>;
export type SupportedTokenCompounded = ContractEventLog<{
  account: string;
  depositIndex: string;
  amount: string;
  compoundTime: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Rewards extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Rewards;
  clone(): Rewards;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MAXIMUM_DEPOSITS_PER_ACCOUNT(): NonPayableTransactionObject<string>;

    airdropAffiliateInterest(
      _account: string,
      _affiliateInterests: number | string | BN
    ): NonPayableTransactionObject<void>;

    airdropAffiliateInterests(
      _accounts: string[],
      _affiliateInterests: number | string | BN
    ): NonPayableTransactionObject<void>;

    airdropDeposit(
      _account: string,
      _depositType: number | string | BN,
      _depositSize: number | string | BN
    ): NonPayableTransactionObject<void>;

    airdropDeposits(
      _accounts: string[],
      _depositType: number | string | BN,
      _depositSize: number | string | BN
    ): NonPayableTransactionObject<void>;

    blacklist(
      _address: string,
      _bool: boolean
    ): NonPayableTransactionObject<void>;

    cashoutAllDeposits(): NonPayableTransactionObject<void>;

    cashoutAllInterests(): NonPayableTransactionObject<void>;

    cashoutAndCompound(
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    cashoutAndCompoundAll(): NonPayableTransactionObject<void>;

    cashoutDeposit(
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    cashoutInterest(
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    compoundAffiliateInterests(): NonPayableTransactionObject<void>;

    createDepositWithTokens(
      _depositSize: number | string | BN,
      _depositType: number | string | BN,
      _sponsor: string
    ): NonPayableTransactionObject<void>;

    createNewDepositType(
      _lockPeriod: number | string | BN,
      _minimalDeposit: number | string | BN,
      _multiplier: number | string | BN,
      _interestInterval: number | string | BN
    ): NonPayableTransactionObject<void>;

    exemptAddressFromFees(
      _address: string,
      _bool: boolean
    ): NonPayableTransactionObject<void>;

    feesWallet(): NonPayableTransactionObject<string>;

    getAccountAffiliateRewardsUnlockTime(
      _account: string
    ): NonPayableTransactionObject<string>;

    getAccountCreationTimes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountDepositSizes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountDepositedValue(
      _account: string
    ): NonPayableTransactionObject<string>;

    getAccountInterestAvailable(
      _account: string
    ): NonPayableTransactionObject<string>;

    getAccountInterestAvailableAsArray(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountLastClaimTimes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountNextInterestTimes(
      _account: string
    ): NonPayableTransactionObject<string[]>;

    getAccountTypes(_account: string): NonPayableTransactionObject<string[]>;

    getAccountUnlockTime(_account: string): NonPayableTransactionObject<string>;

    getAffiliateCount(_account: string): NonPayableTransactionObject<string>;

    getAffiliateInterestsAvailability(
      _account: string
    ): NonPayableTransactionObject<boolean>;

    getAffiliateInterestsAvailable(
      _account: string
    ): NonPayableTransactionObject<string>;

    getDeposit(
      _account: string,
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<[string, string, string, string]>;

    getDepositCount(_account: string): NonPayableTransactionObject<string>;

    getDepositCreationTime(
      _account: string,
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDepositInterestAvailable(
      _account: string,
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDepositLastClaimTime(
      _account: string,
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDepositType(
      _account: string,
      _depositIndex: number | string | BN
    ): NonPayableTransactionObject<string>;

    getInterestInterval(
      _depositType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getInterestIntervals(): NonPayableTransactionObject<string[]>;

    getIsAccountAffiliateRewardsUnlocked(
      _account: string
    ): NonPayableTransactionObject<boolean>;

    getIsAccountUnlocked(
      _account: string
    ): NonPayableTransactionObject<boolean>;

    getLockPeriod(
      _depositType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getLockPeriods(): NonPayableTransactionObject<string[]>;

    getMultiplier(
      _depositType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getMultipliers(): NonPayableTransactionObject<string[]>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getTimeUntilAccountAffiliateRewardsUnlockTime(
      _account: string
    ): NonPayableTransactionObject<string>;

    getTimeUntilAccountUnlockTime(
      _account: string
    ): NonPayableTransactionObject<string>;

    getTotalDepositedAmount(): NonPayableTransactionObject<string>;

    getTotalDepositsCreated(): NonPayableTransactionObject<string>;

    getTotalEarnedAmount(): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    investmentWallet(): NonPayableTransactionObject<string>;

    isBlacklisted(_address: string): NonPayableTransactionObject<boolean>;

    isCashoutPaused(): NonPayableTransactionObject<boolean>;

    isDepositCreationPaused(): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    pauseCashout(_bool: boolean): NonPayableTransactionObject<void>;

    pauseDepositCreation(_bool: boolean): NonPayableTransactionObject<void>;

    removeDepositType(): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    sendFeeBalance(): NonPayableTransactionObject<void>;

    setCashoutFee(
      _cashoutFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setCreateDepositFee(
      _createDepositFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeesWallet(_feesWallet: string): NonPayableTransactionObject<void>;

    setInvestmentWallet(
      _investmentWallet: string
    ): NonPayableTransactionObject<void>;

    setMaximumDepositAmount(
      _maximumDepositAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaximumFirstDepositAmount(
      _maximumFirstDepositAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumFeeBalanceToSend(
      _minimumFeeBalanceToSend: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSponsorFee(
      _sponsorFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSupportedToken(
      _supportedTokenAddress: string
    ): NonPayableTransactionObject<void>;

    setVestingPeriodOfAffiliateInterests(
      _vestingPeriodOfAffiliateInterests: number | string | BN
    ): NonPayableTransactionObject<void>;

    supportedToken(): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    totalDepositTypes(): NonPayableTransactionObject<string>;

    totalDepositedAmount(): NonPayableTransactionObject<string>;

    totalDepositsCreated(): NonPayableTransactionObject<string>;

    totalEarnedAmount(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateDepositLastClaimTime(
      _account: string,
      _depositIndex: number | string | BN,
      _lastClaimTime: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateDepositSize(
      _account: string,
      _depositIndex: number | string | BN,
      _depositSize: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateDepositType(
      _depositType: number | string | BN,
      _lockPeriod: number | string | BN,
      _minimalDeposit: number | string | BN,
      _multiplier: number | string | BN,
      _interestInterval: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawERC20(
      _erc20: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    DepositEntityCreated(cb?: Callback<DepositEntityCreated>): EventEmitter;
    DepositEntityCreated(
      options?: EventOptions,
      cb?: Callback<DepositEntityCreated>
    ): EventEmitter;

    DepositTypeDeleted(cb?: Callback<DepositTypeDeleted>): EventEmitter;
    DepositTypeDeleted(
      options?: EventOptions,
      cb?: Callback<DepositTypeDeleted>
    ): EventEmitter;

    DepositTypeUpdated(cb?: Callback<DepositTypeUpdated>): EventEmitter;
    DepositTypeUpdated(
      options?: EventOptions,
      cb?: Callback<DepositTypeUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    SentFeeBalance(cb?: Callback<SentFeeBalance>): EventEmitter;
    SentFeeBalance(
      options?: EventOptions,
      cb?: Callback<SentFeeBalance>
    ): EventEmitter;

    SupportedTokenClaimed(cb?: Callback<SupportedTokenClaimed>): EventEmitter;
    SupportedTokenClaimed(
      options?: EventOptions,
      cb?: Callback<SupportedTokenClaimed>
    ): EventEmitter;

    SupportedTokenCompounded(
      cb?: Callback<SupportedTokenCompounded>
    ): EventEmitter;
    SupportedTokenCompounded(
      options?: EventOptions,
      cb?: Callback<SupportedTokenCompounded>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DepositEntityCreated", cb: Callback<DepositEntityCreated>): void;
  once(
    event: "DepositEntityCreated",
    options: EventOptions,
    cb: Callback<DepositEntityCreated>
  ): void;

  once(event: "DepositTypeDeleted", cb: Callback<DepositTypeDeleted>): void;
  once(
    event: "DepositTypeDeleted",
    options: EventOptions,
    cb: Callback<DepositTypeDeleted>
  ): void;

  once(event: "DepositTypeUpdated", cb: Callback<DepositTypeUpdated>): void;
  once(
    event: "DepositTypeUpdated",
    options: EventOptions,
    cb: Callback<DepositTypeUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "SentFeeBalance", cb: Callback<SentFeeBalance>): void;
  once(
    event: "SentFeeBalance",
    options: EventOptions,
    cb: Callback<SentFeeBalance>
  ): void;

  once(
    event: "SupportedTokenClaimed",
    cb: Callback<SupportedTokenClaimed>
  ): void;
  once(
    event: "SupportedTokenClaimed",
    options: EventOptions,
    cb: Callback<SupportedTokenClaimed>
  ): void;

  once(
    event: "SupportedTokenCompounded",
    cb: Callback<SupportedTokenCompounded>
  ): void;
  once(
    event: "SupportedTokenCompounded",
    options: EventOptions,
    cb: Callback<SupportedTokenCompounded>
  ): void;
}
